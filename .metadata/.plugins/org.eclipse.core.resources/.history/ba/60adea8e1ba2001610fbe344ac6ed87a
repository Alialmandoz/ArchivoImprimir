package test;

import java.util.Iterator;
import java.util.List;

import javax.management.Query;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.print.attribute.standard.MediaSize.Other;

import org.hibernate.mapping.Map;

import archivoImprimir.gestion.Cliente;
import archivoImprimir.gestion.OrdenTrabajo;
import archivoImprimir.gestion.Trabajo;

/**
 * @author Ivan
 *
 */
public class Mostrador {
	
	
	private static EntityManagerFactory emf = Persistence.createEntityManagerFactory("Persistencia");
	
	


    public static void main(String[] args) {

    	crearCliente("ivan","almandoz","alialmandoz@gmail.com",2613835667l);
    	crearCliente("ivan","almandoz","alialmandoz@gmail.com",2613835667l);
    	crearCliente("Jose","peres","joseperes@gmail.com",2558899988554l);
    	crearCliente("caro","cuore","carocuaore@gmail.com",2615558999l);
    	crearCliente("piere","valmain","piervalmain@gmail.com",261555444777l);
    	
    	
    	
    	crearOrdenTrabajo("ivan", "almandoz");
    	crearOrdenTrabajo("ivan", "almandoz");
    	
    	crearOrdenTrabajo("piere", "valmain");
    	
    	
    	
    	
    	
    	printCliente("ivan","almandoz");
    	printCliente("Jose", "peres");
    	printCliente("caro", "cuore");
    	printCliente("piere", "valmain");
    	
    	printOrden(7l);
    	
    	
    } 




	
	public static void crearCliente( String nombre, String apellido,String mail, Long telefono ) {
		
		System.out.println("creando a "+nombre +" "+apellido); 
    	Cliente cliente = new Cliente(nombre, apellido, mail, telefono);
    	EntityManager man = emf.createEntityManager();
    	
    	@SuppressWarnings("unchecked")
		List<Object> lista = man.createQuery("from Cliente c where nombre = '"+nombre+"' and apellido ='"+apellido+"'" ).getResultList();
//		System.out.println(lista.size());
		if (lista.size()== 0) {
			man.getTransaction().begin();
	    	
	    	man.persist(cliente);
	    	
	    	man.getTransaction().commit();
	    	
	    	man.close();
			
		} else { System.out.println("el cliente "+cliente.getNombre() +" "+cliente.getApellido()+" ya existe");
    	
		}
	}
	
	
	
	
	
	
	
	/**
	 * @param idCliente : id del cliente a que se asociara esta orden
	 */
	public static void crearOrdenTrabajo(String nombre, String apellido){
		EntityManager man = emf.createEntityManager();
		
		@SuppressWarnings("unchecked")
		
		List<Object> lista = man.createQuery("from Cliente c where nombre = '"+nombre+"' and apellido ='"+apellido+"'" ).getResultList();
		Cliente cli = null;
		if (lista.size()== 1) {cli = (Cliente)lista.get(0);} else { System.out.println("no anduvo");}
		OrdenTrabajo ot = new OrdenTrabajo(cli);
    	man.getTransaction().begin();
    	man.merge(cli);
    	man.persist(ot);
    	man.getTransaction().commit();
    	man.close();
    	System.out.println("orden "+ot.getId()+" agregada a "+cli.getNombre()+" "+cli.getApellido());
	}
	
	
	
	
	
	
	/**
	 * @param idOrdenTrabajo orden a a la que se asociara este trabajo
	 * @param idTrabajo identificador unico del trabajo
	 */
	public static void crearTrabajo(Long idOrdenTrabajo,Long idTrabajo) {
		EntityManager man = emf.createEntityManager();
		
		OrdenTrabajo ot = man.find(OrdenTrabajo.class, idOrdenTrabajo);
		Trabajo trabajo = new Trabajo(idTrabajo,ot);
    	man.getTransaction().begin();
    	man.merge(ot);
    	man.persist(trabajo);
    	man.getTransaction().commit();
    	man.close();
		
	}

	
	
	
	
	public static void printCliente(String nombre, String apellido) {
		EntityManager man = emf.createEntityManager();
		@SuppressWarnings("unchecked")
		List <Object>lista = man.createQuery("from Cliente c where nombre = '"+nombre+"' and apellido ='"+apellido+"'").getResultList();
		for (Object cliente : lista) {
			System.out.println(cliente.toString());
		}
	}

	
	
	
	
	
	public static void printOrden(Long idOrdenTrabajo) {
		
		EntityManager man = emf.createEntityManager();
		
		OrdenTrabajo orden = man.find(OrdenTrabajo.class, idOrdenTrabajo);
		
		orden.toString();
		orden.getTrabajos(man,idOrdenTrabajo);
		}



}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
