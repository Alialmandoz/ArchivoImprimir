package test;

import java.time.*;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import ali.almandoz.hibernate.modelo.Autor;
import ali.almandoz.hibernate.modelo.Direccion;
import ali.almandoz.hibernate.modelo.Empleado;
import ali.almandoz.hibernate.modelo.Libro;

public class TestEmpleados {

	private static EntityManagerFactory emf = Persistence.createEntityManagerFactory("Persistencia");

	public static void main(String[] args) {
		
		crearDatos();
		imprimirDatos();
	}
	
	
	public static void crearDatos() {
		EntityManager manager = emf.createEntityManager();
		
		manager.getTransaction().begin();
		
		Autor autor1 = new Autor(1l, "Ivan" , "argentino");
		Autor autor2 = new Autor(2l, "raul" , "peruano");
		Autor autor3 = new Autor(3l, "maricon" , "siciliano");
		
		manager.persist(autor1);
		manager.persist(autor2);
		manager.persist(autor3);
		manager.persist(new Libro(1l, "como programar",autor1));
		manager.persist(new Libro(2l, "como cosinar",autor2));
		manager.persist(new Libro(3l, "como lmpiar",autor3));
		manager.persist(new Libro(4l, "como llorar",autor1));
		manager.persist(new Libro(5l, "como comerla",autor2));
		manager.persist(new Libro(6l, "como pajearse",autor3));
		manager.getTransaction().commit();
		manager.close();

	}	

	public static void putEmpleado(Long id, String apellido, String nombre, LocalDate date, Direccion dir) {
		EntityManager manager = emf.createEntityManager();
		Empleado e = new Empleado(id, apellido, nombre, date);
		e.setDireccion(dir);
		manager.getTransaction().begin();
		manager.persist(e);
		manager.getTransaction().commit();
		manager.close();
	}

	public static void cambiarNombre(Long idEmpleado, String nombre) {
		EntityManager manager = emf.createEntityManager();
		Empleado empleado = manager.find(Empleado.class, 01L);
		manager.merge(empleado);
		manager.getTransaction().begin();
		empleado.setNombre(nombre);
		manager.getTransaction().commit();
		manager.close();

	}
	
	private static void imprimirDatos() {
		EntityManager manager = emf.createEntityManager();
		manager.getTransaction().begin();
		@SuppressWarnings("unchecked")
		List<Autor> autores = manager.createQuery("FROM Autor").getResultList();
		
		for (Autor autor : autores) {
			System.out.println(autor.getNombre()+" escrivio: "+autor.getListaLibros());
		}

	}

	private static void imprimirTodo() {
		EntityManager manager = emf.createEntityManager();
		@SuppressWarnings({ "unchecked" })
		List<Empleado> empleados = manager.createQuery("FROM Empleado").getResultList();
		System.out.println("en la base de datos hay " + empleados.size() + " empleados");
		for (Empleado empleado : empleados) {
			System.out.println(empleado.toString());
		}
		manager.close();
	}

	private static void empleadoFromDireccion(long dir) {
		EntityManager manager = emf.createEntityManager();
		Direccion direccion = manager.find(Direccion.class, dir);
		System.out.println("el empleado en esta direccion es: " + direccion.getEmpleado().getNombre() + " "
				+ direccion.getEmpleado().getApellido());
	}
	
}
